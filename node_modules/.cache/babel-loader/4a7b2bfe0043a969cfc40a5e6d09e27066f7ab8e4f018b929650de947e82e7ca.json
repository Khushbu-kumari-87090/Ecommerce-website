{"ast":null,"code":"import { createIsAfterIgnoreDatePart } from './time-utils';\nimport { mergeDateAndTime, getTodayDate } from './date-utils';\nconst SECTION_TYPE_GRANULARITY = {\n  year: 1,\n  month: 2,\n  day: 3,\n  hours: 4,\n  minutes: 5,\n  seconds: 6,\n  milliseconds: 7\n};\nexport const getSectionTypeGranularity = sections => Math.max(...sections.map(section => {\n  var _SECTION_TYPE_GRANULA;\n  return (_SECTION_TYPE_GRANULA = SECTION_TYPE_GRANULARITY[section.type]) != null ? _SECTION_TYPE_GRANULA : 1;\n}));\nconst roundDate = (utils, granularity, date) => {\n  if (granularity === SECTION_TYPE_GRANULARITY.year) {\n    return utils.startOfYear(date);\n  }\n  if (granularity === SECTION_TYPE_GRANULARITY.month) {\n    return utils.startOfMonth(date);\n  }\n  if (granularity === SECTION_TYPE_GRANULARITY.day) {\n    return utils.startOfDay(date);\n  }\n\n  // We don't have startOfHour / startOfMinute / startOfSecond\n  let roundedDate = date;\n  if (granularity < SECTION_TYPE_GRANULARITY.minutes) {\n    roundedDate = utils.setMinutes(roundedDate, 0);\n  }\n  if (granularity < SECTION_TYPE_GRANULARITY.seconds) {\n    roundedDate = utils.setSeconds(roundedDate, 0);\n  }\n  if (granularity < SECTION_TYPE_GRANULARITY.milliseconds) {\n    roundedDate = utils.setMilliseconds(roundedDate, 0);\n  }\n  return roundedDate;\n};\nexport const getDefaultReferenceDate = _ref => {\n  let {\n    props,\n    utils,\n    valueType,\n    granularity\n  } = _ref;\n  var _props$disableIgnorin;\n  let referenceDate = roundDate(utils, granularity, getTodayDate(utils, valueType));\n  if (props.minDate != null && utils.isAfterDay(props.minDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.minDate);\n  }\n  if (props.maxDate != null && utils.isBeforeDay(props.maxDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.maxDate);\n  }\n  const isAfter = createIsAfterIgnoreDatePart((_props$disableIgnorin = props.disableIgnoringDatePartForTimeValidation) != null ? _props$disableIgnorin : false, utils);\n  if (props.minTime != null && isAfter(props.minTime, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.minTime : mergeDateAndTime(utils, referenceDate, props.minTime));\n  }\n  if (props.maxTime != null && isAfter(referenceDate, props.maxTime)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.maxTime : mergeDateAndTime(utils, referenceDate, props.maxTime));\n  }\n  return referenceDate;\n};","map":{"version":3,"names":["createIsAfterIgnoreDatePart","mergeDateAndTime","getTodayDate","SECTION_TYPE_GRANULARITY","year","month","day","hours","minutes","seconds","milliseconds","getSectionTypeGranularity","sections","Math","max","map","section","_SECTION_TYPE_GRANULA","type","roundDate","utils","granularity","date","startOfYear","startOfMonth","startOfDay","roundedDate","setMinutes","setSeconds","setMilliseconds","getDefaultReferenceDate","_ref","props","valueType","_props$disableIgnorin","referenceDate","minDate","isAfterDay","maxDate","isBeforeDay","isAfter","disableIgnoringDatePartForTimeValidation","minTime","maxTime"],"sources":["C:/Users/amankumar.mandal/MO/frontend/node_modules/@mui/x-date-pickers/internals/utils/getDefaultReferenceDate.js"],"sourcesContent":["import { createIsAfterIgnoreDatePart } from './time-utils';\nimport { mergeDateAndTime, getTodayDate } from './date-utils';\nconst SECTION_TYPE_GRANULARITY = {\n  year: 1,\n  month: 2,\n  day: 3,\n  hours: 4,\n  minutes: 5,\n  seconds: 6,\n  milliseconds: 7\n};\nexport const getSectionTypeGranularity = sections => Math.max(...sections.map(section => {\n  var _SECTION_TYPE_GRANULA;\n  return (_SECTION_TYPE_GRANULA = SECTION_TYPE_GRANULARITY[section.type]) != null ? _SECTION_TYPE_GRANULA : 1;\n}));\nconst roundDate = (utils, granularity, date) => {\n  if (granularity === SECTION_TYPE_GRANULARITY.year) {\n    return utils.startOfYear(date);\n  }\n  if (granularity === SECTION_TYPE_GRANULARITY.month) {\n    return utils.startOfMonth(date);\n  }\n  if (granularity === SECTION_TYPE_GRANULARITY.day) {\n    return utils.startOfDay(date);\n  }\n\n  // We don't have startOfHour / startOfMinute / startOfSecond\n  let roundedDate = date;\n  if (granularity < SECTION_TYPE_GRANULARITY.minutes) {\n    roundedDate = utils.setMinutes(roundedDate, 0);\n  }\n  if (granularity < SECTION_TYPE_GRANULARITY.seconds) {\n    roundedDate = utils.setSeconds(roundedDate, 0);\n  }\n  if (granularity < SECTION_TYPE_GRANULARITY.milliseconds) {\n    roundedDate = utils.setMilliseconds(roundedDate, 0);\n  }\n  return roundedDate;\n};\nexport const getDefaultReferenceDate = ({\n  props,\n  utils,\n  valueType,\n  granularity\n}) => {\n  var _props$disableIgnorin;\n  let referenceDate = roundDate(utils, granularity, getTodayDate(utils, valueType));\n  if (props.minDate != null && utils.isAfterDay(props.minDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.minDate);\n  }\n  if (props.maxDate != null && utils.isBeforeDay(props.maxDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.maxDate);\n  }\n  const isAfter = createIsAfterIgnoreDatePart((_props$disableIgnorin = props.disableIgnoringDatePartForTimeValidation) != null ? _props$disableIgnorin : false, utils);\n  if (props.minTime != null && isAfter(props.minTime, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.minTime : mergeDateAndTime(utils, referenceDate, props.minTime));\n  }\n  if (props.maxTime != null && isAfter(referenceDate, props.maxTime)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.maxTime : mergeDateAndTime(utils, referenceDate, props.maxTime));\n  }\n  return referenceDate;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}